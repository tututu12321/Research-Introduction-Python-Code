import numpy as np
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import matplotlib.pyplot as plt

# サンプル時系列データの生成
np.random.seed(0)
n_timesteps = 100
time = np.linspace(0, 10, n_timesteps)
true_data = np.sin(time)  # 真のデータ（サイン波）
observed_data = true_data + np.random.normal(0, 0.1, n_timesteps)  # ノイズを含んだ観測データ

# データの前処理
def create_dataset(data, n_steps=10):
    X, y = [], []
    for i in range(len(data) - n_steps):
        X.append(data[i:i + n_steps])
        y.append(data[i + n_steps])
    return np.array(X), np.array(y)

n_steps = 10
X, y = create_dataset(observed_data, n_steps)
X = X.reshape((X.shape[0], X.shape[1], 1))

# LSTMモデルの構築
model = Sequential()
model.add(LSTM(50, activation='relu', input_shape=(n_steps, 1)))
model.add(Dense(1))
model.compile(optimizer='adam', loss='mse')

# モデルの学習
model.fit(X, y, epochs=200, verbose=0)

# 予測の実行
lstm_predictions = model.predict(X)

# カルマンフィルタの適用
def apply_kalman_filter(observations, process_variance=1e-5, measurement_variance=0.1):
    n_timesteps = len(observations)
    kalman_estimates = np.zeros(n_timesteps)
    kalman_estimates[0] = observations[0]  # 初期値

    prediction_covariance = 1
    for t in range(1, n_timesteps):
        # 予測ステップ
        prediction_covariance += process_variance

        # カルマンゲインの計算
        kalman_gain = prediction_covariance / (prediction_covariance + measurement_variance)

        # 状態の更新
        kalman_estimates[t] = kalman_estimates[t-1] + kalman_gain * (observations[t] - kalman_estimates[t-1])

        # 共分散の更新
        prediction_covariance *= (1 - kalman_gain)

    return kalman_estimates

# カルマンフィルタをLSTMの予測結果に適用
lstm_kalman_predictions = apply_kalman_filter(lstm_predictions.flatten())

# 結果のプロット
plt.figure(figsize=(12, 6))
plt.plot(true_data[n_steps:], label="True Data", linestyle='dotted')
plt.plot(observed_data[n_steps:], label="Observed Data", linestyle='dotted')
plt.plot(lstm_predictions, label="LSTM Prediction", linestyle='dashed')
plt.plot(lstm_kalman_predictions, label="LSTM + Kalman Filter", linestyle='solid')
plt.legend()
plt.title("LSTM Prediction with Kalman Filter Smoothing")
plt.xlabel("Time Step")
plt.ylabel("Value")
plt.show()
